import React, { useState, useEffect } from 'react';
import { View, Button, Image, Text } from 'react-native';
import * as ImagePicker from 'expo-image-picker';
import firebase from 'firebase/app';
import 'firebase/storage';

export default function Prvdr_Dashboard() {
  const [hasGalleryPermission, setHasGalleryPermission] = useState(null);
  const [image, setImage] = useState(null);

  useEffect(() => {
    (async () => {
      const galleryStatus = await ImagePicker.requestMediaLibraryPermissionsAsync();
      setHasGalleryPermission(galleryStatus.status === 'granted');
    })();
  }, []);

  const pickImage = async () => {
    let result = await ImagePicker.launchImageLibraryAsync({
      mediaTypes: ImagePicker.MediaTypeOptions.Images,
      allowsEditing: true,
      aspect: [4, 3],
      quality: 1,
    });

    console.log(result);

    if (!result.cancelled) {
      setImage(result.uri);
    }
  };

  const uploadImageToFirebase = async () => {
    const response = await fetch(image);
    const blob = await response.blob();

    const filename = image.substring(image.lastIndexOf('/') + 1);
    const storageRef = firebase.storage().ref().child(filename);

    await storageRef.put(blob);
    console.log('Image uploaded to Firebase');
    // You can add further logic here, such as showing a success message or resetting the image state
  };

  if (hasGalleryPermission === false) {
    return <Text>No access to internal Storage</Text>;
  }

  return (
    <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>
      <Button title='Pick Image' onPress={pickImage} />
      {image && <Image source={{ uri: image }} style={{ width: 200, height: 200, marginTop: 20 }} />}
      {image && <Button title='Upload Image to Firebase' onPress={uploadImageToFirebase} />}
    </View>
  );
}
